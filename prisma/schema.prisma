generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "manhco", "waiting_list"]
}

model WaitlistEntry {
  id         Int     @id @default(autoincrement())
  firstName  String  @db.VarChar(50)
  secondName String? @db.VarChar(50)
  email      String  @unique @db.VarChar(255)
  message    String? @db.VarChar(255)

  @@map("waitlist_entry")
  @@schema("waiting_list")
}

model User {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(50)
  secondName      String?          @db.VarChar(50)
  email           String           @unique @db.VarChar(255)
  googleId        String           @unique @db.VarChar(255)
  profilePic      String?          @db.VarChar(255)
  bannerPic       String?          @db.VarChar(255)
  colorTheme      String?          @db.VarChar(255)
  bio             String?          @db.VarChar(255)
  gender          String?          @db.VarChar(255)
  birthday        DateTime?        @db.Date
  newUser         Boolean          @default(true)
  roleId          Int
  country         String?          @db.VarChar(255)
  createdAt       DateTime         @default(now())
  nsfwEnabled     Boolean          @default(false)
  updatedAt       DateTime         @updatedAt
  username        String?          @unique @db.VarChar(255)
  verifiedForNSFW Boolean          @default(false)
  refresh_tokens  refresh_tokens[]
  role            roles            @relation(fields: [roleId], references: [id])

  @@map("users")
  @@schema("manhco")
}

model NSFWPolicy {
  id           Int     @id @default(autoincrement())
  band2Enabled Boolean @default(false)

  @@map("nsfw_policies")
  @@schema("manhco")
}

model NSFWRestrictedCountry {
  id          Int    @id @default(autoincrement())
  countryCode String @unique
  band        Int

  @@map("nsfw_restricted_countries")
  @@schema("manhco")
}

model refresh_tokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@schema("auth")
}

model roles {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(50)
  priority Int    @unique
  users    User[]

  @@schema("auth")
}

// Manhwa Data Service Models
enum DataSource {
  LOCAL
  MANGADEX

  @@schema("manhco")
}

enum PublicationStatus {
  ONGOING
  COMPLETED
  HIATUS
  CANCELLED

  @@schema("manhco")
}

enum SyncStatus {
  CURRENT
  OUTDATED
  FAILED

  @@schema("manhco")
}

model Manhwa {
  id                Int               @id @default(autoincrement())
  mangadexId        String?           @unique @db.VarChar(255)
  dataSource        DataSource        @default(LOCAL)
  titleData         Json              // Stores primary title and alternatives
  status            PublicationStatus
  startYear         Int?
  endYear           Int?
  publisher         String?           @db.VarChar(255)
  synopsis          String            @db.Text
  totalChapters     Int?
  specialChapters   Json?             // Array of special chapter info
  coverThumbnail    String?           @db.VarChar(500)
  coverMedium       String?           @db.VarChar(500)
  coverLarge        String?           @db.VarChar(500)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastSyncedAt      DateTime?
  syncStatus        SyncStatus        @default(CURRENT)
  version           Int               @default(1)
  searchVector      Unsupported("tsvector")? // For PostgreSQL full-text search
  genres            ManhwaGenre[]     // Many-to-many relationship

  @@map("manhwa")
  @@schema("manhco")
}

model Genre {
  id      Int           @id @default(autoincrement())
  name    String        @unique @db.VarChar(100)
  slug    String        @unique @db.VarChar(100)
  manhwa  ManhwaGenre[] // Many-to-many relationship

  @@map("genres")
  @@schema("manhco")
}

model ManhwaGenre {
  manhwaId Int
  genreId  Int
  manhwa   Manhwa @relation(fields: [manhwaId], references: [id], onDelete: Cascade)
  genre    Genre  @relation(fields: [genreId], references: [id])

  @@id([manhwaId, genreId])
  @@map("manhwa_genres")
  @@schema("manhco")
}

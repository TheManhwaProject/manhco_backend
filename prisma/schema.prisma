generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["manhco", "waiting_list", "auth"]
}

// Waitlist
model WaitlistEntry {
  id         Int     @id @default(autoincrement())
  firstName  String  @db.VarChar(50)
  secondName String? @db.VarChar(50)
  email      String  @unique @db.VarChar(255)
  message    String? @db.VarChar(255)

  @@map("waitlist_entry")
  @@schema("waiting_list")
}

// User model
model User {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(255)
  firstName       String    @db.VarChar(50)
  secondName      String?   @db.VarChar(50)
  email           String    @unique @db.VarChar(255)
  googleId        String    @unique @db.VarChar(255)
  profilePic      String?   @db.VarChar(255)
  bannerPic       String?   @db.VarChar(255)
  colorTheme      String?   @db.VarChar(255)
  bio             String?   @db.VarChar(255)
  gender          String?   @db.VarChar(255)
  birthday        DateTime? @db.Date
  newUser         Boolean   @default(true)
  nsfwEnabled     Boolean   @default(false)
  verifiedForNSFW Boolean   @default(false)  // for band 2, age verification
  country         String?   @db.VarChar(255) // ISO 3166-1 alpha-2

  // Role relationship
  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  // Relationships
  refreshTokens RefreshToken[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
  @@schema("manhco")
}

// Role model
model Role {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(50) // e.g., 'user', 'admin', 'moderator'
  priority Int    @unique // Lower number = higher priority (e.g., 0 for super_admin, 1 for admin)

  // Relationships
  users User[]

  @@map("roles")
  @@schema("auth")
}

// Refresh Token model for token rotation
model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
  @@schema("auth")
}

model NSFWPolicy {
  id           Int     @id @default(autoincrement())
  band2Enabled Boolean @default(false)

  @@map("nsfw_policies")
  @@schema("manhco")
}

model NSFWRestrictedCountry {
  id          Int    @id @default(autoincrement())
  countryCode String @unique // ISO 3166-1 alpha-2
  band        Int // 1 or 2

  @@map("nsfw_restricted_countries")
  @@schema("manhco")
}
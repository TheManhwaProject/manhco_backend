generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["manhco", "waiting_list", "auth"]
}

// Waitlist
model WaitlistEntry {
  id          Int    @id @default(autoincrement())
  firstName   String @db.VarChar(50)
  secondName  String? @db.VarChar(50)
  email       String @unique @db.VarChar(255)
  message     String? @db.VarChar(255)

  @@schema("waiting_list")
  @@map("waitlist_entry")
}

// User model
model User {
  id          Int    @id @default(autoincrement())
  firstName   String @db.VarChar(50)
  secondName  String? @db.VarChar(50)
  email       String @unique @db.VarChar(255)
  googleId    String @unique @db.VarChar(255)
  profilePic  String? @db.VarChar(255)
  bannerPic   String? @db.VarChar(255)
  colorTheme  String? @db.VarChar(255)
  bio         String? @db.VarChar(255)
  gender      String? @db.VarChar(255)
  birthday    DateTime? @db.Date
  newUser     Boolean @default(true)

  // Role relationship
  roleId      Int
  role        Role   @relation(fields: [roleId], references: [id])

  // Relationships
  refreshTokens RefreshToken[]

  @@schema("manhco")
  @@map("user")
}

// Role model
model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50) // e.g., 'user', 'admin', 'moderator'
  priority  Int      @unique // Lower number = higher priority (e.g., 0 for super_admin, 1 for admin)

  // Relationships
  users     User[]

  @@schema("auth")
  @@map("role")
}

// Refresh Token model for token rotation
model RefreshToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique @db.VarChar(500)
  userId      Int
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@schema("auth")
  @@map("refresh_token")
}